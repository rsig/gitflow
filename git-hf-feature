#!/usr/bin/env bash
#
# HubFlow - a fork of the git-flow tools to apply Vincent Driessen's
# branching model to working with GitHub
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# The HubFlow documentation is found at:
#    http://datasift.github.com/gitflow/
#
# Feel free to contribute to this project at:
#    http://github.com/datasift/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# Copyright 2012 MediaSift Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_hubflow_initialized
hubflow_load_settings
PREFIX=$(git config --get hubflow.prefix.feature)

usage() {
	echo "usage: git hf feature [list] [-v]"
	echo "       git hf feature start <name> [<base>]"
	echo "       git hf feature submit [<name>] [<base>]"
	echo "       git hf feature diff [<name|nameprefix>]"
	echo "       git hf feature rebase [-i] [<name|nameprefix>]"
	echo "       git hf feature checkout <name> [-f]"
	echo "       git hf feature pull [-r] [<remote> [<name>]]"
	echo "       git hf feature push [<remote> [<name>]]"
	echo "       git hf feature cancel [-f] <name>"
	echo "       git hf feature rename <new-name>"
}

cmd_default() {
	cmd_list "$@"
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

	local feature_branches=$(git_list_branches_of_type $FEATURE_PREFIX)

	if [ -z "$feature_branches" ]; then
		warn "No feature branches exist."
		warn ""
		warn "You can start a new feature branch:"
		warn ""
		warn "    git hf feature start <name> [<base>]"
		warn ""
		exit 0
	fi

	# determine column width first
	local width=0
	local branch
	for branch in $feature_branches; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	local branch
	for branch in $feature_branches; do
		local fullname=$FEATURE_PREFIX$branch
		local remote=
		if ! git_local_branch_exists $fullname ; then
			fullname="$ORIGIN/$fullname"
			remote=" (only at $ORIGIN)"
		fi
		local base=$(git merge-base "$fullname" "$DEVELOP_BRANCH")
		local develop_sha=$(git rev-parse "$DEVELOP_BRANCH")
		local branch_sha=$(git rev-parse "$fullname")
		local already_merged=$(git_is_branch_merged_into "$fullname" "$DEVELOP_BRANCH")
		if [[ $fullname == $CURRENT_BRANCH ]]; then
			printf "* "
		else
			printf "  "
		fi
		if flag verbose; then
			printf "%-${width}s" "$branch"
			if [ "$branch_sha" = "$develop_sha" ]; then
				printf "(no commits yet)"
			elif [ "$base" = "$branch_sha" ]; then
				printf "(is behind develop, may ff)"
			elif [ "$base" = "$develop_sha" ]; then
				printf "(based on latest develop)"
			elif $already_merged ; then
				printf "(already merged; ready for finishing)"
			else
				printf "(may be rebased)"
			fi
			printf "%s" "$remote"
		else
			printf "%s" "$branch"
		fi
		echo
	done
}

cmd_help() {
	usage
	exit 0
}

require_name_arg() {
	if [ "$NAME" = "" ]; then
		warn "Missing argument <name>"
		usage
		exit 1
	fi
}

require_newname_arg() {
	if [[ -z $NAME ]] ; then
		warn "Missing argument <new-name>"
		usage
		exit 1
	fi
}

expand_nameprefix_arg() {
	require_name_arg

	local expanded_name
	local exitcode
    track_repo=$(hubflow_track_repo "$NAME" "$FEATURE_PREFIX" "$ORIGIN")
    expanded_name=$(hubflow_resolve_nameprefix "$NAME" "$FEATURE_PREFIX")
	exitcode=$?
	case $exitcode in
		0) NAME=$expanded_name
		   FEATURE_BRANCH=$FEATURE_PREFIX$NAME
		   ;;
		*) exit 1 ;;
	esac
}

use_current_feature_branch_name() {
	local current_branch=$(git_current_branch)
	if startswith "$current_branch" "$FEATURE_PREFIX"; then
		FEATURE_BRANCH=$current_branch
		NAME=${FEATURE_BRANCH#$FEATURE_PREFIX}
	else
		warn "The current HEAD is not a feature branch."
		warn "Please specify a <name> argument."
		exit 1
	fi
}

expand_nameprefix_arg_or_current() {
	if [ "$NAME" != "" ]; then
		expand_nameprefix_arg
		require_branch "$FEATURE_PREFIX$NAME"
	else
		use_current_feature_branch_name
	fi
}

name_or_current() {
	if [ -z "$NAME" ]; then
		use_current_feature_branch_name
	fi
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	NAME=$1
	FEATURE_BRANCH=$FEATURE_PREFIX$NAME
}

parse_remote_name() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	REMOTE=$1
	NAME=$2
	NEW_BRANCH=$FEATURE_PREFIX$NAME
}

cmd_start() {
	DEFINE_boolean fetch true 'fetch from $ORIGIN before creating the new branch' F
	parse_args "$@"
	BASE=${2:-$DEVELOP_BRANCH}
	NEW_BRANCH="$FEATURE_PREFIX$1"
	require_name_arg

	# sanity checks
	require_clean_working_tree
	require_remote_available
	if flag fetch ; then
		hubflow_fetch_latest_changes_from_origin
	fi
	require_branch_absent "$ORIGIN/$NEW_BRANCH"

	# if the origin branch counterpart exists, assert that the local branch
	# isn't behind it (to avoid unnecessary rebasing)
	if git_branch_exists "$ORIGIN/$DEVELOP_BRANCH"; then
		require_branches_equal "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	fi

	# create branch
	if ! git checkout -b "$NEW_BRANCH" "$BASE"; then
		die "Could not create feature branch '$NEW_BRANCH'"
	fi

	# push it back up to remote repo
	hubflow_push_latest_changes_to_origin

	echo
	echo "Summary of actions:"
	echo "- A new branch '$NEW_BRANCH' was created, based on '$BASE'"
	echo "- The branch '$NEW_BRANCH' has been pushed up to '$ORIGIN/$NEW_BRANCH'"
	echo "- You are now on branch '$NEW_BRANCH'"
	echo ""
	echo "Now, start committing on your feature. When done, create a"
	echo "pull request on GitHub.  Once that has been merged, use:"
	echo ""
	echo "     git hf feature submit"
	echo
	echo "to delete the branch both locally and remotely."
}

cmd_submit() {
	parse_args "$@"
    BASE=${2:-$DEVELOP_BRANCH}
	name_or_current

	# sanity checks
	require_branch "$FEATURE_BRANCH"
	require_clean_working_tree
    require_github_origin_repo
	require_remote_available
	hubflow_fetch_latest_changes_from_origin

	# push to origin
	hubflow_push_latest_changes_to_origin

  REPO_URL=`git remote -v | grep -m1 '^origin' | sed -Ene's#.*(git@[^[:space:]]*).*#\1#p'`
  USER=`echo $REPO_URL | sed -Ene's#git@github.com:([^/]*)/(.*).git#\1#p'`
  REPO=`echo $REPO_URL | sed -Ene's#git@github.com:([^/]*)/(.*).git#\2#p'`

  sleep 2
  open -a "${HUBFLOW_BROWSER:-Google Chrome}" "https://github.com/$USER/$REPO/compare/$BASE...$USER:$FEATURE_BRANCH?expand=1"
  
	echo
	echo "Summary of actions:"
	echo "- The branch '$FEATURE_BRANCH' was pushed to '$ORIGIN'"
	echo "- A Browser was opened to create a Pull Request from '$FEATURE_BRANCH' to '$BASE' was created at '$PR_URL'"
	echo "- Fill out the Pull Request form on Github and submit it for peer approval."
	echo ""
	echo "Once the Pull Request has been accepted, cleanup the feature with:"
	echo ""
	echo "  git checkout develop"
	echo "  git pull"
	echo "  git branch -d $NAME"
	echo
}

cmd_diff() {
	parse_args "$@"

	if [ "$NAME" != "" ]; then
		expand_nameprefix_arg
		BASE=$(git merge-base "$DEVELOP_BRANCH" "$FEATURE_BRANCH")
		git diff "$BASE..$FEATURE_BRANCH"
	else
		if ! git_current_branch | grep -q "^$FEATURE_PREFIX"; then
			die "Not on a feature branch. Name one explicitly."
		fi

		BASE=$(git merge-base "$DEVELOP_BRANCH" HEAD)
		git diff "$BASE"
	fi
}

cmd_checkout() {
	DEFINE_boolean fetch true 'fetch from $ORIGIN before creating the new branch' F
	parse_args "$@"

	if [[ -z "$NAME" ]] ; then
		die "Missing argument: <name> - the name of the branch"
	fi

	# sanity checks
	require_clean_working_tree

	if flag fetch ; then
		hubflow_fetch_latest_changes_from_origin
	fi

	# thanks to the following folks for this idea:
	#
	# - https://github.com/bmomberger-reciprocity
	# - https://github.com/jhofmeyr

	# does the feature already exist?
	if git_local_branch_exists "$BRANCH" ; then
		# we have a local branch - use that
		hubflow_change_branch "$BRANCH"
	elif git_remote_branch_exists "$ORIGIN/$BRANCH" ; then
		# we have a remote branch - create a local feature branch based
		# on the remote branch
		git checkout -b "$BRANCH" --track "$ORIGIN/$BRANCH"
	else
		# the user is really trying to start a new feature
		#
		# we do not automatically create the feature, in case they have
		# mistyped something
		warn "The feature '$NAME' does not yet exist locally or remotely."
		warn
		warn "- Do you need to do a 'git hf update' first?"
		warn "- Did you mis-type the name of the feature you want to checkout?"
		warn "- Or do you need to use 'git hf feature start $NAME' instead"
		warn "  to start a new feature?"
		exit 1
	fi
}

cmd_co() {
	# Alias for checkout
	cmd_checkout "$@"
}

cmd_rebase() {
	DEFINE_boolean interactive false 'do an interactive rebase' i
	parse_args "$@"
	expand_nameprefix_arg_or_current
	warn "Will try to rebase '$NAME'..."
	require_clean_working_tree
	require_branch "$FEATURE_BRANCH"

	git checkout -q "$FEATURE_BRANCH"
	local OPTS=
	if flag interactive; then
		OPTS="$OPTS -i"
	fi
	git rebase $OPTS "$DEVELOP_BRANCH"
}

avoid_accidental_cross_branch_action() {
	local current_branch=$(git_current_branch)
	if [ "$FEATURE_BRANCH" != "$current_branch" ]; then
		warn "Trying to pull from '$FEATURE_BRANCH' while currently on branch '$current_branch'."
		warn "To avoid unintended merges, hubflow aborted."
		return 1
	fi
	return 0
}

cmd_pull() {
	git hf pull "$@"
}

cmd_push() {
	git hf push "$@"
}

cmd_cancel() {
	DEFINE_boolean fetch true "fetch from $ORIGIN before performing cancel" F
	DEFINE_boolean push true "push to $ORIGIN after performing cancel" p
	DEFINE_boolean keep false "keep branch after performing cancel" k
	DEFINE_boolean force false "safety feature; cannot cancel a feature without this flag" f

	parse_args "$@"
	name_or_current

	# has the user chosen the force flag?
	if noflag force ; then
		warn "To prevent you accidentally cancelling a feature, you _must_ use the -f flag"
		warn "with this command"
		exit 1
	fi

	# sanity checks
	require_branch "$FEATURE_BRANCH"
	require_clean_working_tree
	if flag push ; then
		git push "$ORIGIN" "$FEATURE_BRANCH" || die "Could not push feature branch up to $ORIGIN"
	fi

	# delete the remote branch
	if flag push ; then
		git push "$ORIGIN" :"$FEATURE_BRANCH" || \
			die "Could not delete the remote $FEATURE_BRANCH in $ORIGIN."
	fi

	# delete the local branch
	if noflag keep ; then
		hubflow_change_branch "$DEVELOP_BRANCH"
		git branch -D "$FEATURE_BRANCH"
	fi

	echo
	echo "Summary of actions:"
	if flag push ; then
		echo "- Latest objects have been fetched from '$ORIGIN'"
	fi
	if flag push ; then
		echo "- Feature branch '$FEATURE_BRANCH' in '$ORIGIN' has been deleted."
	fi
	if flag keep ; then
		echo "- Feature branch '$FEATURE_BRANCH' is still available locally"
	else
		echo "- Feature branch '$FEATURE_BRANCH' has been deleted locally"
	fi
	echo
}

cmd_rename() {
	# sort out our args
	parse_args "$@"
	require_newname_arg
	NEWNAME=$NAME
	use_current_feature_branch_name

	# make sure the new branch has the feature prefix
	if ! echo "$NEWNAME" | grep -q "^$FEATURE_PREFIX" ; then
		NEWNAME="$FEATURE_PREFIX$NEWNAME"
	fi

	# we need to know the current state of $ORIGIN
	hubflow_fetch_latest_changes_from_origin

	# sanity checks
	require_branch "$FEATURE_BRANCH"
	require_branch_absent "$NEWNAME"
	require_branch_absent "$ORIGIN/$NEWNAME"

	# keep track of what we did
	local removed_remote=0

	# do it
	git branch -m "$FEATURE_BRANCH" "$NEWNAME" || die "could not rename local branch"
	if git_branch_exists "$ORIGIN/$FEATURE_BRANCH" ; then
		git push $ORIGIN ":$FEATURE_BRANCH" || die "could not delete remote branch '$FEATURE_BRANCH' at $ORIGIN"
		removed_remote=1
	fi
	git push "$ORIGIN" "$NEWNAME" || die "could not push new branch '$NEWNAME' to $ORIGIN"

	# summary
	echo
	echo "Summary of actions:"
	echo "- The local branch '$FEATURE_BRANCH' has been renamed to '$NEWNAME'."
	if [[ $removed_remote == 1 ]] ; then
		echo "- The remote branch '$FEATURE_BRANCH' at $ORIGIN was removed."
	fi
	echo "- The local branch '$NEWNAME' has been pushed to $ORIGIN."
	echo
}
