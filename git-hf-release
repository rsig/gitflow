#!/usr/bin/env bash
#
# HubFlow - a fork of the git-flow tools to apply Vincent Driessen's
# branching model to working with GitHub
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# The HubFlow documentation is found at:
#    http://datasift.github.com/gitflow/
#
# Feel free to contribute to this project at:
#    http://github.com/datasift/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# Copyright 2012 MediaSift Ltd. All rights reserved.
#
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_hubflow_initialized
hubflow_load_settings

usage() {
	echo "usage: git hf release [list] [-v]"
	echo "       git hf release start <version> [<base>]"
	echo "       git hf release finish [-sumpk] <version>"
	echo "       git hf release cancel <version>"
	echo "       git hf release push [<version>]"
	echo "       git hf release pull [<version>]"
	echo "       git hf release rename <new-version>"
}

cmd_default() {
	cmd_list "$@"
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

	local release_branches
	local current_branch
	local short_names
	release_branches=$(echo "$(git_local_branches)" | grep "^$RELEASE_PREFIX")
	if [ -z "$release_branches" ]; then
		warn "No release branches exist."
                warn ""
                warn "You can start a new release branch:"
                warn ""
                warn "    git hf release start <name> [<base>]"
                warn ""
		exit 0
	fi

	current_branch=$(git_current_branch)
	short_names=$(echo "$release_branches" | sed "s ^$RELEASE_PREFIX  g")

	# determine column width first
	local width=0
	local branch
	for branch in $short_names; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	local branch
	for branch in $short_names; do
		local fullname=$RELEASE_PREFIX$branch
		local base=$(git merge-base "$fullname" "$DEVELOP_BRANCH")
		local develop_sha=$(git rev-parse "$DEVELOP_BRANCH")
		local branch_sha=$(git rev-parse "$fullname")
		if [ "$fullname" = "$current_branch" ]; then
			printf "* "
		else
			printf "  "
		fi
		if flag verbose; then
			printf "%-${width}s" "$branch"
			if [ "$branch_sha" = "$develop_sha" ]; then
				printf "(no commits yet)"
			else
				local nicename=$(git rev-parse --short "$base")
				printf "(based on $nicename)"
			fi
		else
			printf "%s" "$branch"
		fi
		echo
	done
}

cmd_help() {
	usage
	exit 0
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	VERSION=$1
	RELEASE_BRANCH=$RELEASE_PREFIX$VERSION
}

require_version_arg() {
	if [ "$VERSION" = "" ]; then
		warn "Missing argument <version>"
		usage
		exit 1
	fi
}

require_newversion_arg() {
	if [[ -z $VERSION ]] ; then
		warn "Missing argument <new-version>"
		usage
		exit 1
	fi
}

require_no_existing_release_branches() {
	local release_branches=$(echo "$(git_local_branches)" | grep "^$RELEASE_PREFIX")
	local first_branch=$(echo ${release_branches} | head -n1)
	first_branch=${first_branch#$RELEASE_PREFIX}
	[ -z "$release_branches" ] || \
		die "There is an existing release branch ($first_branch). Finish that one first."
}

cmd_start() {
	DEFINE_boolean fetch true "fetch from $ORIGIN before creating the new branch" F
	parse_args "$@"
	if hubflow_is_support_branch ; then
		BASE=$CURRENT_BRANCH
	else
		BASE=$DEVELOP_BRANCH
	fi
	BASE=${3:-$BASE}
	require_version_arg

	# sanity checks
	require_clean_working_tree
	require_remote_available
	if flag fetch ; then
		hubflow_fetch_latest_changes_from_origin
	fi
	require_base_is_on_develop_or_support
	require_no_existing_release_branches

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$RELEASE_BRANCH"
	require_tag_absent "$RELEASE_PREFIX$VERSION"
	if has "$ORIGIN/$BASE" $(git_remote_branches); then
		require_branches_equal "$BASE" "$ORIGIN/$BASE"
	fi

	# create branch
	git checkout -b "$RELEASE_BRANCH" "$BASE" || die "Unable to create branch '$RELEASE_BRANCH'"

	# remember where to merge it back to
	git_config_set_branch "$RELEASE_BRANCH" hubflowBase "$BASE"

	# push it back up to remote repo
	hubflow_push_latest_changes_to_origin

	echo
	echo "Summary of actions:"
	echo "- A new branch '$RELEASE_BRANCH' was created, based on '$BASE'"
	echo "- The branch '$RELEASE_BRANCH' has been pushed up to '$ORIGIN/$RELEASE_BRANCH'"
	echo "- You are now on branch '$RELEASE_BRANCH'"
	echo
	echo "Follow-up actions:"
	echo "- Bump the version number now!"
	echo "- Start committing last-minute fixes in preparing your release"
	echo "- When done, run:"
	echo
	echo "     git hf release finish '$VERSION'"
	echo
	echo "  and your changes will be merged back into '$BASE'."
}

cmd_finish() {
	DEFINE_boolean fetch true "fetch from $ORIGIN before performing finish" F
	DEFINE_boolean sign false "sign the release tag cryptographically" s
	DEFINE_string signingkey "" "use the given GPG-key for the digital signature (implies -s)" u
	DEFINE_string message "" "use the given tag message" m
	DEFINE_boolean automessage false "use the tag name as the message" M
	DEFINE_boolean push true "push to $ORIGIN after performing finish" p
	DEFINE_boolean keep false "keep branch after performing finish" k
	DEFINE_boolean notag false "don't tag this release" n

	parse_args "$@"
	require_version_arg

	# make sure that nasty things don't happen if we're not on
	# the release branch at the current time
	RELEASE_BRANCH="$RELEASE_PREFIX$VERSION"

	# handle flags that imply other flags
	if [ "$FLAGS_signingkey" != "" ]; then
		FLAGS_sign=$FLAGS_TRUE
	fi

	# sanity checks
	require_branch "$RELEASE_BRANCH"
	require_clean_working_tree
	require_remote_available

	# update local repo with remote changes first, if asked
	if flag fetch; then
		# fetch and merge the latest changes from origin
		hubflow_merge_latest_changes_from_origin
	fi

	# push up to origin
	if flag push ; then
		hubflow_push_latest_changes_to_origin
	fi

	# where are we merging into?
	BASE=$(git_config_get_branch $RELEASE_BRANCH hubflowBase)
	if [[ $BASE == $DEVELOP_BRANCH ]] ; then
		# this is a release made from develop
		#
		# we must merge it into MASTER and DEVELOP
		tag_branch="$MASTER_BRANCH"
		additional_branch="$DEVELOP_BRANCH"
		final_branch="$DEVELOP_BRANCH"
	else
		# this is a release made from a support branch
		#
		# we must merge it back into the support branch
		tag_branch="$BASE"
		final_branch="$BASE"
	fi

	# we need to be up to date before we go any further
	for merge_branch in $tag_branch $additional_branch ; do
		if has "$ORIGIN/$merge_branch" $(git_remote_branches); then
			require_branches_equal "$merge_branch" "$ORIGIN/$merge_branch"
		fi
	done

	# try to merge into the branch we want to tag, first
	# in case a previous attempt to finish this release branch has failed,
	# but the merge into master was successful, we skip it now
	hubflow_local_merge_helper "$RELEASE_BRANCH" "$tag_branch" no_checkout_afterwards no_ff

	if noflag notag; then
		# try to tag the release
		local tagname="$VERSION_PREFIX$VERSION"
		if ! git_tag_exists "$tagname"; then
			local opts="-a"

			flag sign && opts="$opts -s"
			[ "$FLAGS_signingkey" != "" ] && opts="$opts -u '$FLAGS_signingkey'"

			# use the tag as the message
			if flag automessage ; then
				FLAGS_message="Released $tagname"
			fi

			# add the tag message if there is one
			[ "$FLAGS_message" != "" ] && opts="$opts -m '$FLAGS_message'"

			git checkout "$tag_branch" || die "Could not checkout $tag_branch."
			eval git tag $opts "$tagname" || \
			die "Tagging failed. Please run finish again to retry."
		fi

		# now merge from the tag into the additional_branch, if there
		# is one
		if [[ -n $additional_branch ]] ; then
			if noflag nobackmerge ; then
				# merge from the tag down into the DEVELOP branch
				#
				# this makes the master branch and the new tag a parent
				# of the develop branch, which in turn lets you use
				# 'git describe' on either branch
				#
				# we use 'no_ff' because we want a commit for the merge
				# to appear in the git history
				hubflow_local_merge_helper "$tagname" "$additional_branch" no_ff no_checkout_afterwards
			else
				# just merge the release branch into the DEVELOP branch
				#
				# this means that MASTER and DEVELOP continue to diverge
				# for the moment
				#
				# we use 'no_ff' because we want a commit for the merge
				# to appear in the git history
				hubflow_local_merge_helper "$RELEASE_BRANCH" "$additional_branch" no_ff no_checkout_afterwards
			fi
		fi
	else
		# there's no tag, so just merge into any additional branch
		#
		# we use 'no_ff' because we want a commit for the merge to appear
		# in the git history
		if [[ -n $additional_branch ]] ; then
			hubflow_local_merge_helper "$RELEASE_BRANCH" "$additional_branch" no_ff no_checkout_afterwards
		fi
	fi

	# switch to our final branch
	hubflow_change_branch "$final_branch"

	# make sure the merge worked before we start deleting stuff
	for merge_branch in $tag_branch $additional_branch ; do
		if [[ $(git rev-list -n2 "$merge_branch..$RELEASE_BRANCH") ]] ; then
			die "release merge into $merge_branch failed"
		fi
	done

	# delete branch
	if noflag keep; then
		if [ "$RELEASE_BRANCH" = "$(git_current_branch)" ]; then
			hubflow_change_branch "$MASTER_BRANCH"
		fi
		git branch -d "$RELEASE_BRANCH"
	fi

	if flag push; then
		# push the changed branches
		for merge_branch in $tag_branch $additional_branch ; do
			git push "$ORIGIN" "$merge_branch" || \
			die "Could not push $merge_branch to $ORIGIN."
		done

		# push any new tags
		if noflag notag; then
			git push --tags "$ORIGIN" || \
			  die "Could not push tags to $ORIGIN."
		fi

		# delete the release branch
		if noflag keep ; then
			git push "$ORIGIN" :"$RELEASE_BRANCH" || \
				die "Could not delete the remote $RELEASE_BRANCH in $ORIGIN."
		fi
	fi

	echo
	echo "Summary of actions:"
	if flag push ; then
		echo "- Latest objects have been fetched from '$ORIGIN'"
	fi
	echo "- Branch '$RELEASE_BRANCH' has been merged into $tag_branch"
	if noflag notag; then
		echo "- The release was tagged '$tagname'"
		if [[ -n $additional_branch ]] ; then
			echo "- The tag '$tagname' was merged into $additional_branch"
		fi
	elif [[ -n $additional_branch ]] ; then
		echo "- Branch '$RELEASE_BRANCH' has been merged into $additional_branch"
	fi
	if flag keep; then
		echo "- Branch '$RELEASE_BRANCH' is still available"
	else
		echo "- Branch '$RELEASE_BRANCH' has been deleted"
	fi
	if flag push; then
		echo "- Changed branches and tags have been pushed to '$ORIGIN'"
		if noflag keep ; then
			echo "- Branch '$RELEASE_BRANCH' in '$ORIGIN' has been deleted."
		fi
	fi
	echo
}

cmd_cancel() {
	DEFINE_boolean fetch true "fetch from $ORIGIN before performing cancel" F
	DEFINE_string message "" "use the given tag message" m
	DEFINE_boolean push true "push to $ORIGIN after performing cancel" p
	DEFINE_boolean keep false "keep branch after performing cancel" k
	DEFINE_boolean force false "safety feature; cannot cancel a release without this flag" f
	DEFINE_boolean discard true "drop the changes in this release; do not merge back into develop" d

	parse_args "$@"
	require_version_arg

	# has the user chosen the force flag?
	if noflag force ; then
		warn "To prevent you accidentally cancelling a release, you _must_ use the -f flag"
		warn "with this command"
		exit 1
	fi

	# sanity checks
	require_branch "$RELEASE_BRANCH"
	require_clean_working_tree
	if flag fetch ; then
		hubflow_fetch_latest_changes_from_origin
	fi
	hubflow_change_branch "$RELEASE_BRANCH"
	if flag push ; then
		hubflow_push_latest_changes_to_origin
	fi

	# where did this branch come from?
	BASE=$(git_config_get_branch $RELEASE_BRANCH hubflowBase)
	if [[ $BASE == $MASTER_BRANCH ]] ; then
		# this is a hotfix made from master
		#
		# if we are not discarding it, we will merge it into DEVELOP
		merge_branch="$DEVELOP_BRANCH"
	else
		# this is a release made from a support branch
		#
		# we must merge it back into the support branch
		merge_branch="$BASE"
	fi

	# we only merge into develop if the user hasn't selected the -d flag
	if noflag discard ; then
		if has "$ORIGIN/$merge_branch" $(git_remote_branches); then
			require_branches_equal "$merge_branch" "$ORIGIN/$merge_branch"
		fi

		# try to merge into develop
		hubflow_local_merge_helper "$RELEASE_BRANCH" "$merge_branch" no_ff no_checkout_afterwards

		# push back to remote repo
		if flag push ; then
			hubflow_push_latest_changes_to_origin
		fi
	fi

	# delete the remote branch
	if flag push ; then
		git push "$ORIGIN" :"$RELEASE_BRANCH" || \
			die "Could not delete the remote $RELEASE_BRANCH in $ORIGIN."
	fi

	# delete local branch
	if noflag keep ; then
		# make sure we are back onto develop | support
		hubflow_change_branch "$merge_branch"

		git branch -d "$RELEASE_BRANCH"
	fi

	echo
	echo "Summary of actions:"
	if flag push ; then
		echo "- Latest objects have been fetched from '$ORIGIN'"
	fi
	if noflag discard ; then
		echo "- Release branch has been merged into '$merge_branch'"
		if flag push ; then
			echo "- '$merge_branch' has been pushed to '$ORIGIN'"
		fi
	fi
	if flag push ; then
		echo "- Release branch '$RELEASE_BRANCH' in '$ORIGIN' has been deleted."
	fi
	if flag keep ; then
		echo "- Release branch '$RELEASE_BRANCH' is still available locally"
	else
		echo "- Release branch '$RELEASE_BRANCH' has been deleted locally"
	fi

	echo
}

cmd_publish() {
	git hf push "$@"
}

cmd_pull() {
	git hf pull "$@"
}

cmd_push() {
	git hf push "$@"
}

parse_remote_name() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	REMOTE=$1
	NAME=$2
	RELEASE_BRANCH=$RELEASE_PREFIX$NAME
}

name_or_current() {
	if [ -z "$NAME" ]; then
		use_current_release_branch_name
	fi
}

avoid_accidental_cross_branch_action() {
	local current_branch=$(git_current_branch)
	if [ "$RELEASE_BRANCH" != "$current_branch" ]; then
		warn "Trying to pull from '$RELEASE_BRANCH' while currently on branch '$current_branch'."
		warn "To avoid unintended merges, hubflow aborted."
		return 1
	fi
	return 0
}

use_current_release_branch_name() {
	local current_branch=$(git_current_branch)
	if startswith "$current_branch" "$RELEASE_PREFIX"; then
		RELEASE_BRANCH=$current_branch
		NAME=${RELEASE_BRANCH#$RELEASE_PREFIX}
	else
		warn "The current HEAD is no release branch."
		warn "Please specify a <name> argument."
		exit 1
	fi
}

cmd_rename() {
	# sort out our args
	parse_args "$@"
	require_newversion_arg
	NEWNAME=$VERSION
	use_current_release_branch_name

	# make sure the new branch has the release prefix
	if ! echo "$NEWNAME" | grep -q "^$HOTFIX_PREFIX" ; then
		NEWNAME="$RELEASE_PREFIX$NEWNAME"
	fi

	# we need to know the current state of $ORIGIN
	hubflow_fetch_latest_changes_from_origin

	# sanity checks
	require_branch "$RELEASE_BRANCH"
	require_branch_absent "$NEWNAME"
	require_branch_absent "$ORIGIN/$NEWNAME"
	require_tag_absent "${NEWNAME#$RELEASE_PREFIX}"

	# keep track of what we did
	local removed_remote=0

	# do it
	git branch -m "$RELEASE_BRANCH" "$NEWNAME" || die "could not rename local branch"
	if git_branch_exists "$ORIGIN/$RELEASE_BRANCH" ; then
		git push $ORIGIN ":$RELEASE_BRANCH" || die "could not delete remote branch '$RELEASE_BRANCH' at $ORIGIN"
		removed_remote=1
	fi
	git push "$ORIGIN" "$NEWNAME" || die "could not push new branch '$NEWNAME' to $ORIGIN"

	# summary
	echo
	echo "Summary of actions:"
	echo "- The local branch '$RELEASE_BRANCH' has been renamed to '$NEWNAME'."
	if [[ $removed_remote == 1 ]] ; then
		echo "- The remote branch '$RELEASE_BRANCH' at $ORIGIN was removed."
	fi
	echo "- The local branch '$NEWNAME' has been pushed to $ORIGIN."
	echo
}
